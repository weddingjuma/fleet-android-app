apply plugin: 'com.android.application'

android {
  signingConfigs {
    fleetDebug {
      storeFile file('debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }
  }

  compileSdkVersion 27
  buildToolsVersion '27.0.3'
  defaultConfig {
    multiDexEnabled true
    applicationId "com.mapotempo.mapotempo_fleet_android"
    minSdkVersion 19
    targetSdkVersion 27
    versionCode 4000
    versionName "4.0.00"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.fleetDebug
      applicationIdSuffix '.debug'
      minifyEnabled false
      resValue "string", "app_name", "Mapotempo Live" + applicationIdSuffix
    }

    release {
      signingConfig signingConfigs.fleetDebug
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      resValue "string", "app_name", "Mapotempo Live"
    }
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }
}

repositories {
  mavenLocal()
}

repositories {
  jcenter()
  maven {
    url "http://files.couchbase.com/maven2/"
  }
}

dependencies {
  implementation 'com.android.support:support-v4:27.1.1'
  implementation 'com.android.support:recyclerview-v7:27.1.1'
  implementation 'com.android.support.constraint:constraint-layout:1.1.2'
  compile fileTree(dir: 'lib', include: ['*.jar'])
  compile project(':lib')

  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  implementation 'com.android.support:appcompat-v7:27.+'
  implementation 'com.android.support:design:27.+'

  testCompile 'junit:junit:4.12'
}

/*
task generateJavaDoc(type: org.gradle.api.tasks.javadoc.Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("./src/documentation/")
    failOnError false
}*/

FileTree docFilesTree = fileTree(dir: 'src/main/doc-files')

task copyJavaDocSupportFiles(type: Copy) {
  from docFilesTree
  into 'build/docs/javadoc/doc-files/'
}

task generateApiJavadocs(name: 'documentation', type: Javadoc, dependsOn: ['copyJavaDocSupportFiles']) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  options.overview('src/main/overview.html')
  failOnError true
}
